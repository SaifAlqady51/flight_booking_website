// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // uses connection pooling
  relationMode = "prisma"
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String?        @unique
  image         String?
  emailVerified String?
  searchResults SearchResult[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model SearchResult {
  id             String  @id @default(cuid())
  location       Json
  distination    Json
  flightDate     String
  numberOfAdults String
  travelClass    String
  flights        Json?
  logos          Json?
  user           User?   @relation(fields: [userId], references: [id])
  userId         String?

  @@map("searchResults")
}
